local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- ID bunyi
local JUMP_ID = "rbxassetid://115680913237541"
local WALK_ID = "rbxassetid://6929242058"
local SPONGEBOB_WALK_ID = "rbxassetid://5948749731"
local MRKRAB_WALK_ID = "rbxassetid://3426632334"

-- 🛡️ Pemeriksa asal
if not script:FindFirstChild("BangyanSignature") then
    local tag = Instance.new("StringValue")
    tag.Name = "BangyanSignature"
    tag.Value = "Protected by Bangyan © 2025"
    tag.Parent = script
end

task.spawn(function()
    while task.wait(10) do
        if not script:FindFirstChild("BangyanSignature") then
            warn("⚠️ Skrip ini asalnya dibuat oleh Bangyan. Sila letak semula kredit asal.")
        end
    end
end)

-- ============ MANAGE DEFAULT SOUNDS ============
local defaultJumpSound = nil
local defaultFootstepSound = nil

local function hideDefaultSounds(char)
    -- Cari dan sembunyikan (jangan hapus) suara default jump
    if char:FindFirstChild("Jump") then
        defaultJumpSound = char:FindFirstChild("Jump")
        defaultJumpSound.Volume = 0
    end
    if humanoid:FindFirstChild("Jump") then
        defaultJumpSound = humanoid:FindFirstChild("Jump")
        defaultJumpSound.Volume = 0
    end
    
    -- Cari suara default footstep/running
    for _, sound in pairs(char:GetDescendants()) do
        if sound:IsA("Sound") then
            if sound.Name == "Footstep" or sound.Name == "Running" then
                defaultFootstepSound = sound
                defaultFootstepSound.Volume = 0
            end
        end
    end
    
    for _, sound in pairs(humanoid:GetChildren()) do
        if sound:IsA("Sound") then
            if sound.Name == "Footstep" or sound.Name == "Running" then
                defaultFootstepSound = sound
                defaultFootstepSound.Volume = 0
            end
        end
    end
end

-- Jalankan hide untuk character pertama
hideDefaultSounds(character)

-- ============ JUMP SOUND SETUP ============
local jumpSound = Instance.new("Sound")
jumpSound.Name = "CustomJump"
jumpSound.SoundId = JUMP_ID
jumpSound.Volume = 1
jumpSound.Looped = false
jumpSound.Parent = rootPart

-- ============ WALK SOUND SETUP ============
local walkSound = Instance.new("Sound")
walkSound.Name = "CustomFootstep"
walkSound.SoundId = WALK_ID
walkSound.Volume = 1
walkSound.Looped = true
walkSound.PlaybackSpeed = 1
walkSound.RollOffMaxDistance = 100
walkSound.RollOffMinDistance = 10
walkSound.Parent = rootPart

-- ============ STATUS VARIABLES ============
local jumpEnabled = true
local walkEnabled = true
local isWalking = false
local isJumping = false
local lastJumpTime = 0
local MIN_JUMP_INTERVAL = 0.05
local currentWalkSound = "SQUID"
local allSoundsEnabled = true

-- Variabel untuk menyimpan status sebelum respawn
local savedJumpEnabled = jumpEnabled
local savedWalkEnabled = walkEnabled
local savedCurrentWalkSound = currentWalkSound
local savedAllSoundsEnabled = allSoundsEnabled

local jumpConnection = nil
local runConnection = nil
local stateConnection = nil
local heartbeatConnection = nil

-- ============ JUMP FUNCTIONS ============
local function onJump(jumping)
    if jumping then
        local currentTime = tick()
        
        if currentTime - lastJumpTime >= MIN_JUMP_INTERVAL then
            lastJumpTime = currentTime
            
            -- Jika custom jump diaktifkan
            if jumpEnabled and allSoundsEnabled then
                if jumpSound.IsPlaying then
                    jumpSound:Stop()
                end
                
                -- Matikan suara default
                if defaultJumpSound then
                    defaultJumpSound.Volume = 0
                end
                
                task.spawn(function()
                    jumpSound.TimePosition = 0
                    jumpSound:Play()
                end)
                -- Jika custom jump dimatikan, aktifkan suara default
            elseif defaultJumpSound then
                defaultJumpSound.Volume = 1
            end
        end
    end
end

-- ============ WALK FUNCTIONS ============
local function ensureSoundPlaying()
    if walkEnabled and allSoundsEnabled and isWalking and not isJumping then
        if not walkSound.IsPlaying then
            walkSound:Play()
        end
    elseif walkSound.IsPlaying then
        walkSound:Stop()
    end
end

local function handleWalking(speed)
    if not allSoundsEnabled then
        isWalking = false
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        -- Aktifkan suara default
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 1
        end
        return 
    end
    
    if not walkEnabled then
        isWalking = false
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        -- Aktifkan suara default
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 1
        end
        return
    end
    
    if speed > 2 and humanoid.FloorMaterial ~= Enum.Material.Air then
        isWalking = true
        -- Matikan suara default
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 0
        end
        if not walkSound.IsPlaying and not isJumping then
            walkSound:Play()
        end
    else
        isWalking = false
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        -- Aktifkan suara default
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 1
        end
    end
end

local function handleStateChanged(oldState, newState)
    if newState == Enum.HumanoidStateType.Jumping then
        isJumping = true
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
    elseif newState == Enum.HumanoidStateType.Landed then
        isJumping = false
        if isWalking and walkEnabled and allSoundsEnabled then
            walkSound:Play()
        end
    elseif newState == Enum.HumanoidStateType.Freefall then
        isJumping = true
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
    end
end

-- ============ CONNECT EVENTS ============
jumpConnection = humanoid.Jumping:Connect(onJump)
runConnection = humanoid.Running:Connect(handleWalking)
stateConnection = humanoid.StateChanged:Connect(handleStateChanged)
heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(ensureSoundPlaying)

-- ============ PLATFORM DETECTION ============
local UserInputService = game:GetService("UserInputService")
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- ============ GUI SETUP ============
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SoundTogglePanel"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = player:WaitForChild("PlayerGui")

-- ============ MAIN TOGGLE BUTTON ============
local toggleContainer = Instance.new("Frame")
toggleContainer.Name = "ToggleContainer"
toggleContainer.Size = isMobile and UDim2.new(0, 32, 0, 32) or UDim2.new(0, 32, 0, 32)
toggleContainer.Position = UDim2.new(0, 10, 0, 10)
toggleContainer.BackgroundTransparency = 1
toggleContainer.Parent = screenGui

local containerCorner = Instance.new("UICorner")
containerCorner.CornerRadius = isMobile and UDim.new(0, 10) or UDim.new(0, 10)
containerCorner.Parent = toggleContainer

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(0, 0, 0)
stroke.Thickness = 1
stroke.Transparency = 0.5
stroke.Parent = toggleContainer

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "MainToggleBtn"
toggleButton.Size = UDim2.new(1, 0, 1, 0)
toggleButton.Position = UDim2.new(0, 0, 0, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(52, 152, 219)
toggleButton.BorderSizePixel = 0
toggleButton.Text = "👣"
toggleButton.TextSize = isMobile and 18 or 18
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.GothamBold
toggleButton.ZIndex = 10
toggleButton.Parent = toggleContainer

local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = isMobile and UDim.new(0, 10) or UDim.new(0, 10)
buttonCorner.Parent = toggleButton

-- ============ PANEL MENU ============
local menuPanel = Instance.new("Frame")
menuPanel.Name = "MenuPanel"
menuPanel.Size = isMobile and UDim2.new(0, 86, 0, 140) or UDim2.new(0, 86, 0, 140)
menuPanel.Position = isMobile and UDim2.new(0, 45, 0, 10) or UDim2.new(0, 45, 0, 10)
menuPanel.BackgroundColor3 = Color3.fromRGB(44, 62, 80)
menuPanel.BorderSizePixel = 0
menuPanel.Visible = false
menuPanel.ZIndex = 9
menuPanel.Parent = screenGui

local menuCorner = Instance.new("UICorner")
menuCorner.CornerRadius = UDim.new(0, 10)
menuCorner.Parent = menuPanel

local menuStroke = Instance.new("UIStroke")
menuStroke.Color = Color3.fromRGB(0, 0, 0)
menuStroke.Thickness = 1
menuStroke.Transparency = 0.5
menuStroke.Parent = menuPanel

-- ============ MENU BUTTONS ============
local function createMenuButton(name, icon, yPos)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Size = isMobile and UDim2.new(1, -8, 0, 22) or UDim2.new(1, -8, 0, 22)
    btn.Position = UDim2.new(0, 4, 0, yPos)
    btn.BackgroundColor3 = Color3.fromRGB(52, 73, 94)
    btn.BorderSizePixel = 0
    btn.TextSize = isMobile and 9 or 9
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.GothamSemibold
    btn.ZIndex = 10
    btn.Parent = menuPanel
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 5)
    btnCorner.Parent = btn
    
    return btn
end

local jumpBtn = createMenuButton("JumpBtn", "🔊", 3)
jumpBtn.Text = "UNYAH"
jumpBtn.BackgroundColor3 = Color3.fromRGB(46, 204, 113)

local walkBtn = createMenuButton("WalkBtn", "👣", isMobile and 28 or 28)
walkBtn.Text = "SQUID"
walkBtn.BackgroundColor3 = Color3.fromRGB(46, 204, 113)

local spongebobBtn = createMenuButton("SpongebobBtn", "🧽", isMobile and 53 or 53)
spongebobBtn.Text = "SPONGEBOB"
spongebobBtn.BackgroundColor3 = Color3.fromRGB(231, 76, 60)

local mrkrabBtn = createMenuButton("MrkrabBtn", "🦀", isMobile and 78 or 78)
mrkrabBtn.Text = "MR. KRAB"
mrkrabBtn.BackgroundColor3 = Color3.fromRGB(231, 76, 60)

local offBtn = createMenuButton("OffBtn", "🔇", isMobile and 103 or 103)
offBtn.Text = "OFF"
offBtn.BackgroundColor3 = Color3.fromRGB(231, 76, 60)

-- ============ MENU STATE MANAGEMENT ============
local menuOpen = false
local function toggleMenu()
    menuOpen = not menuOpen
    menuPanel.Visible = menuOpen
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    if menuOpen then
        menuPanel.Position = isMobile and UDim2.new(0, 45, 0, 10) or UDim2.new(0, 45, 0, 10)
        local tween = tweenService:Create(toggleButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)})
        tween:Play()
    else
        local tween = tweenService:Create(toggleButton, tweenInfo, {BackgroundColor3 = Color3.fromRGB(52, 152, 219)})
        tween:Play()
    end
end

-- ============ BUTTON EVENTS ============
toggleButton.MouseButton1Click:Connect(toggleMenu)

toggleButton.MouseButton1Down:Connect(function()
    local tweenService = game:GetService("TweenService")
    local rotateAnim = tweenService:Create(toggleButton, TweenInfo.new(0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Rotation = 20})
    rotateAnim:Play()
end)

toggleButton.MouseButton1Up:Connect(function()
    local tweenService = game:GetService("TweenService")
    local resetAnim = tweenService:Create(toggleButton, TweenInfo.new(0.15, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Rotation = 0})
    resetAnim:Play()
end)

jumpBtn.MouseButton1Click:Connect(function()
    if not allSoundsEnabled then return end
    
    jumpEnabled = not jumpEnabled
    savedJumpEnabled = jumpEnabled
    jumpBtn.Text = "UNYAH"
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local newColor = jumpEnabled and Color3.fromRGB(46, 204, 113) or Color3.fromRGB(231, 76, 60)
    local tween = tweenService:Create(jumpBtn, tweenInfo, {BackgroundColor3 = newColor})
    tween:Play()
end)

walkBtn.MouseButton1Click:Connect(function()
    if not allSoundsEnabled then return end
    
    currentWalkSound = "SQUID"
    savedCurrentWalkSound = currentWalkSound
    walkSound.SoundId = WALK_ID
    walkEnabled = true
    savedWalkEnabled = true
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)})
    tween:Play()
    
    tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    
    if isWalking then
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        walkSound:Play()
    end
end)

spongebobBtn.MouseButton1Click:Connect(function()
    if not allSoundsEnabled then return end
    
    currentWalkSound = "SPONGEBOB"
    savedCurrentWalkSound = currentWalkSound
    walkSound.SoundId = SPONGEBOB_WALK_ID
    walkEnabled = true
    savedWalkEnabled = true
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)})
    tween:Play()
    
    tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    
    if isWalking then
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        walkSound:Play()
    end
end)

mrkrabBtn.MouseButton1Click:Connect(function()
    if not allSoundsEnabled then return end
    
    currentWalkSound = "MRKRAB"
    savedCurrentWalkSound = currentWalkSound
    walkSound.SoundId = MRKRAB_WALK_ID
    walkEnabled = true
    savedWalkEnabled = true
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)})
    tween:Play()
    
    tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    
    if isWalking then
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        walkSound:Play()
    end
end)

offBtn.MouseButton1Click:Connect(function()
    allSoundsEnabled = not allSoundsEnabled
    savedAllSoundsEnabled = allSoundsEnabled
    
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    if allSoundsEnabled then
        tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        
        if jumpEnabled then
            tweenService:Create(jumpBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
        else
            tweenService:Create(jumpBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        end
        
        if currentWalkSound == "SQUID" then
            tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
            tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
            tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        elseif currentWalkSound == "SPONGEBOB" then
            tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
            tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
            tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        else
            tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
            tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
            tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
        end
        
        -- Matikan suara default
        if defaultJumpSound then
            defaultJumpSound.Volume = 0
        end
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 0
        end
        
        if isWalking and walkEnabled then
            walkSound:Play()
        end
    else
        tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
        tweenService:Create(jumpBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        
        if jumpSound.IsPlaying then
            jumpSound:Stop()
        end
        if walkSound.IsPlaying then
            walkSound:Stop()
        end
        
        -- Aktifkan suara default
        if defaultJumpSound then
            defaultJumpSound.Volume = 1
        end
        if defaultFootstepSound then
            defaultFootstepSound.Volume = 1
        end
    end
end)

-- ============ HOVER EFFECTS ============
local function addHoverEffect(btn)
    btn.MouseEnter:Connect(function()
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = tweenService:Create(btn, tweenInfo, {BackgroundTransparency = 0.1})
        tween:Play()
    end)
    
    btn.MouseLeave:Connect(function()
        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = tweenService:Create(btn, tweenInfo, {BackgroundTransparency = 0})
        tween:Play()
    end)
end

addHoverEffect(jumpBtn)
addHoverEffect(walkBtn)
addHoverEffect(spongebobBtn)
addHoverEffect(mrkrabBtn)
addHoverEffect(offBtn)

-- ============ RESPAWN CLEANUP ============
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Hide default sounds untuk character baru
    hideDefaultSounds(character)
    
    if jumpSound then
        jumpSound:Destroy()
    end
    if walkSound then
        walkSound:Destroy()
    end
    
    jumpSound = Instance.new("Sound")
    jumpSound.Name = "CustomJump"
    jumpSound.SoundId = JUMP_ID
    jumpSound.Volume = 1
    jumpSound.Looped = false
    jumpSound.Parent = rootPart
    
    walkSound = Instance.new("Sound")
    walkSound.Name = "CustomFootstep"
    walkSound.SoundId = currentWalkSound == "SPONGEBOB" and SPONGEBOB_WALK_ID or (currentWalkSound == "MRKRAB" and MRKRAB_WALK_ID or WALK_ID)
    walkSound.Volume = 1
    walkSound.Looped = true
    walkSound.PlaybackSpeed = 1
    walkSound.RollOffMaxDistance = 100
    walkSound.RollOffMinDistance = 10
    walkSound.Parent = rootPart
    
    lastJumpTime = 0
    isWalking = false
    isJumping = false
    
    -- Restore saved status
    jumpEnabled = savedJumpEnabled
    walkEnabled = savedWalkEnabled
    currentWalkSound = savedCurrentWalkSound
    allSoundsEnabled = savedAllSoundsEnabled
    
    if jumpConnection then
        jumpConnection:Disconnect()
    end
    if runConnection then
        runConnection:Disconnect()
    end
    if stateConnection then
        stateConnection:Disconnect()
    end
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    
    jumpConnection = humanoid.Jumping:Connect(onJump)
    runConnection = humanoid.Running:Connect(handleWalking)
    stateConnection = humanoid.StateChanged:Connect(handleStateChanged)
    heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(ensureSoundPlaying)
    
    -- Update button UI berdasarkan saved status
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    -- Update jump button
    local jumpColor = jumpEnabled and Color3.fromRGB(46, 204, 113) or Color3.fromRGB(231, 76, 60)
    tweenService:Create(jumpBtn, tweenInfo, {BackgroundColor3 = jumpColor}):Play()
    
    -- Update walk button
    if currentWalkSound == "SQUID" then
        tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
        tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    elseif currentWalkSound == "SPONGEBOB" then
        tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
        tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
    else
        tweenService:Create(walkBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(spongebobBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(231, 76, 60)}):Play()
        tweenService:Create(mrkrabBtn, tweenInfo, {BackgroundColor3 = Color3.fromRGB(46, 204, 113)}):Play()
    end
    
    -- Update off button
    local offColor = allSoundsEnabled and Color3.fromRGB(231, 76, 60) or Color3.fromRGB(46, 204, 113)
    tweenService:Create(offBtn, tweenInfo, {BackgroundColor3 = offColor}):Play()
    
    menuOpen = false
    menuPanel.Visible = false
end)

-- ============ CLEANUP ON DEATH ============
player.CharacterRemoving:Connect(function()
    if jumpConnection then
        jumpConnection:Disconnect()
    end
    if runConnection then
        runConnection:Disconnect()
    end
    if stateConnection then
        stateConnection:Disconnect()
    end
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    if jumpSound then
        jumpSound:Destroy()
    end
    if walkSound then
        walkSound:Destroy()
    end
end)
